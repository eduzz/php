# docker build -f 8.0 -t eduzz/php:8.0 --progress=plain --build-arg PHP_IMAGE_VERSION="8.0-fpm-buster" .
ARG PHP_IMAGE_VERSION=8.0-fpm-buster

FROM php:$PHP_IMAGE_VERSION

ARG PHP_IMAGE_VERSION
ENV PHP_IMAGE_VERSION $PHP_IMAGE_VERSION

# = /usr/local/etc/php
ENV PHP_INI_DIR ${PHP_INI_DIR:-/usr/local/etc/php}
# = /usr/local/etc/php/conf.d
ENV PHP_INI_SCAN_DIR ${PHP_INI_DIR}/conf.d
# = /usr/local/etc/php-fpm.d
ENV PHP_FPM_POOL_DIR ${PHP_INI_DIR}-fpm.d

RUN if echo "${PHP_IMAGE_VERSION}" | grep -q "cli"; then \
        set -xe \
            && echo "---> Installing Composer" \
            && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version=1.10.22 \
            && COMPOSER_ALLOW_SUPERUSER=1 composer global require hirak/prestissimo:"^0.3" --ansi \
            && composer global install --prefer-dist --no-dev --no-suggest --optimize-autoloader --ansi \
            && composer clear-cache \
            && composer --version || true \
    ;fi

RUN set -xe \
    && apt-get update \
    && apt-get install --no-install-recommends -y \
        zip \
        git \
        wget \
        unzip \
        gnupg2 \
        locales \
        apt-transport-https \
    && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
    && locale-gen \
    && apt-get purge -y --auto-remove && rm -rf /var/lib/apt/lists/* \
    && rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin

# Install the PHP EXTENSIONS
RUN set -xe; \
    \
    echo "---> Preparing and Installing PHP"; \
    \
    # Print the list of manually installed packages
    savedAptMark="$(apt-mark showmanual)"; \
    \
    apt-get update; \
    # Dependencies required for PHP EXTENSIONS
    apt-get install --no-install-recommends -y \
        # for GD extension
        libpng-dev \
        libwebp-dev \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        # for zip extension
        libzip-dev \
        zlib1g-dev \
        # for pdo_pgsql extension
        libpq-dev \
        # for soap
        libxml2-dev \
        # for uuid
        uuid-dev \
    ; \
    docker-php-ext-configure gd \
        --enable-gd \
        --with-freetype \
        --with-jpeg \
        --with-webp \
    ; \
    docker-php-ext-configure mysqli --with-mysqli=mysqlnd; \
    docker-php-ext-configure pdo_mysql --with-pdo-mysql=mysqlnd; \
    docker-php-ext-configure zip --with-zip \
    ; \
    docker-php-ext-install -j $(nproc) \
        gd \
        zip \
        intl \
        soap \
        pcntl \
        mysqli \
        bcmath \
        sockets \
        opcache \
        pdo_pgsql \
    ; \
    pecl install -o -f \
        uuid-1.2.0 \
        xdebug-3.0.4 \
        mongodb-1.10.0; \
    printf "no \n no \n no \n" | pecl install redis-5.3.4 \
    ; \
    docker-php-ext-enable \
        uuid \
        redis \
        xdebug \
        mongodb \
    ; \
    echo "---> Cleaning up"; \
    \
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
    apt-mark auto '.*' > /dev/null; \
    apt-mark manual $savedAptMark; \
    find /usr/local -type f -executable -exec ldd '{}' ';' \
        | awk '/=>/ { print $(NF-1) }' \
        | sort -u \
        | xargs -r dpkg-query --search \
        | cut -d: -f1 \
        | sort -u \
        | xargs -r apt-mark manual \
    ; \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    rm -rf /var/lib/apt/lists/*; \
    rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin; \
    \
# update pecl channel definitions https://github.com/docker-library/php/issues/443
    pecl update-channels; \
    rm -rf /tmp/pear ~/.pearrc

RUN set -xe \
    && echo "---> Move PHP.INI(PRODUCTION)" \
    && mv ${PHP_INI_DIR}/php.ini-production ${PHP_INI_DIR}/php.ini \
    && sed -i -e 's/expose_php = On/expose_php = Off/' ${PHP_INI_DIR}/php.ini \
    && mv ${PHP_INI_SCAN_DIR}/docker-php-ext-xdebug.ini ${PHP_INI_SCAN_DIR}/zz-xdebug.ini.disabled

# TODO: Remove when https://pecl.php.net/package/amqp have support for php 8
# @see https://github.com/mlocati/docker-php-extension-installer/blob/master/install-php-extensions#L1322
RUN set -xe; \
    \
    savedAptMark="$(apt-mark showmanual)"; \
    \
    echo "---> Installing PHP AMQP"; \
    \
    apt-get update; \
    \
    # for amqp extension
    apt-get install --no-install-recommends -y librabbitmq-dev; \
    rm -rf /var/lib/apt/lists/*; \
    \
    wget -c https://codeload.github.com/php-amqp/php-amqp/tar.gz/df1241852b359cf12c346beaa68de202257efdf1 -O"php-amqp.tar.gz"; \
    gzip -dc php-amqp*.tar.gz | tar xf -; \
    \
    cd php-amqp-* && phpize && ./configure; \
    \
    make -j $(nproc) && make install; \
    \
    docker-php-ext-enable amqp; \
    \
    echo "---> Cleaning up"; \
    \
    cd .. && rm -Rf php-amqp*

########
## SQLSRV + PDO_SQLSRV
# Microsoft Drivers for PHP for SQL Server (SQLSRV + PDO_SQLSRV)
# @see https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15#debian17
########

RUN set -xe; \
    \
    # Installing the Microsoft ODBC Driver for SQL Server on Linux (DEBIAN)
    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -; \
    curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list; \
    \
    apt-get update; \
    \
    # @see https://stackoverflow.com/questions/15447386/sql-h-header-file-missing-though-unixodbc-is-installed
    apt-get install unixodbc-dev libsybdb5 freetds-dev --no-install-recommends -y; \
    ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/; \
    \
    ACCEPT_EULA=Y apt-get install msodbcsql17 --no-install-recommends -y; \
    \
    docker-php-ext-install pdo_dblib; \
    pecl install sqlsrv-5.9.0 pdo_sqlsrv-5.9.0; \
    \
    docker-php-ext-enable pdo_dblib sqlsrv pdo_sqlsrv; \
    \
    apt-get purge -y --auto-remove && rm -rf /var/lib/apt/lists/*; \
    rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin

RUN if echo "${PHP_IMAGE_VERSION}" | grep -q "fpm"; then \
        set -xe \
            && /usr/local/sbin/php-fpm --test \
            && PHP_ERROR="$( php -v 2>&1 1>/dev/null )" \
            && if [ -n "$PHP_ERROR" ]; then echo "$PHP_ERROR"; false; fi \
            && echo "\nCPTimeout=300\n\n[ODBC]\nPooling=Yes" >> /etc/odbcinst.ini \
    ;fi

RUN php -m && \
    php -v && \
    php --ini

COPY freetds.conf /etc/freetds/freetds.conf
COPY openssl.cnf /etc/ssl/openssl.cnf
